#!/usr/bin/env node

/**
 * Module dependencies.
 */
const config = require("../config");
const app_client = require("../client/app");
const app_server = require("../api");
const debug_server = require("debug")("Pickrt:server");
const debug_client = require("debug")("Pickrt:client");

const fs = require("fs");
const https = require("https");


const SSLCert = fs.readFileSync("/var/www/pickrt/conf/pickrt.com.cert");
const SSLKey = fs.readFileSync("/var/www/pickrt/conf/pickrt.com.key");



/**
 * Get port from environment and store in Express.
 */
const port_client = normalizePort(process.env.PORT || config.client.port);
const port_server = normalizePort(process.env.PORT || config.server.port);

app_client.set("port", port_client);
app_server.set("port", port_server);



/**
 * Listen on provided port, on all network interfaces.
 */
const server_client = https.createServer({
	key: SSLKey,
	cert: SSLCert
}, app_client);



const server_api = https.createServer({
	key: SSLKey,
	cert: SSLCert
}, app_server);

server_client.listen(port_client);
server_api.listen(port_server);


server_api.on("error", function (error) {
	if (error.syscall !== "listen") {
		throw error;
	}
	const bind = typeof port_server === "string"
        ? "Pipe " + port_server
        : "Port " + port_server;

	switch (error.code) {
	case "EACCES":
		debug_server(bind + " requires elevated privileges");
		process.exit(1);
		break;
	case "EADDRINUSE":
		debug_server(bind + " is already in use");
		process.exit(1);
		break;
	default:
		throw error;
	}
});


server_api.on("listening", function(){
	debug_server("API listening on 2097");
});

server_client.on("error", function (error) {
	if (error.syscall !== "listen") {
		throw error;
	}
	const bind = typeof port_client === "string"
        ? "Pipe " + port_client
        : "Port " + port_client;

	switch (error.code) {
	case "EACCES":
		debug_client(bind + " requires elevated privileges");
		process.exit(1);
		break;
	case "EADDRINUSE":
		debug_client(bind + " is already in use");
		process.exit(1);
		break;
	default:
		throw error;
	}
});


server_client.on("listening", function(){
	debug_client("App listening on 2087");
});





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
        // named pipe
		return val;
	}

	if (port >= 0) {
        // port number
		return port;
	}

	return false;
}

